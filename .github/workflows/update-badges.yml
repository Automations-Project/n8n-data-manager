name: Update Dynamic Badges

on:
  push:
    branches: [ main ]
  schedule:
    # Update badges daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-badges:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get repository stats
      id: stats
      run: |
        # Get current version
        VERSION=$(grep -E '^SCRIPT_VERSION=' n8n-manager.sh | cut -d'"' -f2 || echo "unknown")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Get file sizes
        SCRIPT_SIZE=$(stat -c%s n8n-manager.sh)
        SCRIPT_SIZE_KB=$((SCRIPT_SIZE / 1024))
        echo "script_size=${SCRIPT_SIZE_KB}KB" >> $GITHUB_OUTPUT
        
        # Get line count
        LINE_COUNT=$(wc -l < n8n-manager.sh)
        echo "line_count=$LINE_COUNT" >> $GITHUB_OUTPUT
        
        # Get last commit date
        LAST_COMMIT=$(git log -1 --format=%cd --date=short)
        echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
        
        # Get shell version requirement
        SHELL_REQ=$(grep -E 'bash.*[0-9]' n8n-manager.sh | head -1 | grep -oE '[0-9]\.[0-9]+' || echo "4.0+")
        echo "shell_requirement=$SHELL_REQ" >> $GITHUB_OUTPUT

    - name: Check latest release
      id: release
      run: |
        # Get latest release info
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "none"')
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        
        # Check if there are unreleased changes
        if [ "$LATEST_RELEASE" != "none" ]; then
          COMMITS_SINCE=$(git rev-list --count ${LATEST_RELEASE}..HEAD 2>/dev/null || echo "0")
        else
          COMMITS_SINCE=$(git rev-list --count HEAD)
        fi
        echo "commits_since_release=$COMMITS_SINCE" >> $GITHUB_OUTPUT

    - name: Generate badge URLs
      id: badges
      run: |
        VERSION="${{ steps.stats.outputs.version }}"
        SCRIPT_SIZE="${{ steps.stats.outputs.script_size }}"
        LINE_COUNT="${{ steps.stats.outputs.line_count }}"
        LAST_COMMIT="${{ steps.stats.outputs.last_commit }}"
        SHELL_REQ="${{ steps.stats.outputs.shell_requirement }}"
        LATEST_RELEASE="${{ steps.release.outputs.latest_release }}"
        COMMITS_SINCE="${{ steps.release.outputs.commits_since_release }}"
        
        # Generate shield.io badge URLs
        VERSION_BADGE="https://img.shields.io/badge/version-${VERSION}-blue"
        SIZE_BADGE="https://img.shields.io/badge/size-${SCRIPT_SIZE}-green"
        LINES_BADGE="https://img.shields.io/badge/lines-${LINE_COUNT}-yellow"
        SHELL_BADGE="https://img.shields.io/badge/bash-${SHELL_REQ}-orange"
        LICENSE_BADGE="https://img.shields.io/badge/License-MIT-yellow.svg"
        LAST_COMMIT_BADGE="https://img.shields.io/badge/last--commit-${LAST_COMMIT}-lightgrey"
        
        # Status badges
        if [ "$COMMITS_SINCE" -gt "0" ]; then
          STATUS_BADGE="https://img.shields.io/badge/status-development-orange"
        else
          STATUS_BADGE="https://img.shields.io/badge/status-stable-green"
        fi
        
        # Docker compatibility badge
        DOCKER_BADGE="https://img.shields.io/badge/docker-compatible-blue"
        
        # GitHub specific badges
        RELEASE_BADGE="https://img.shields.io/github/v/release/${{ github.repository }}"
        DOWNLOADS_BADGE="https://img.shields.io/github/downloads/${{ github.repository }}/total"
        ISSUES_BADGE="https://img.shields.io/github/issues/${{ github.repository }}"
        
        echo "version_badge=$VERSION_BADGE" >> $GITHUB_OUTPUT
        echo "size_badge=$SIZE_BADGE" >> $GITHUB_OUTPUT
        echo "lines_badge=$LINES_BADGE" >> $GITHUB_OUTPUT
        echo "shell_badge=$SHELL_BADGE" >> $GITHUB_OUTPUT
        echo "license_badge=$LICENSE_BADGE" >> $GITHUB_OUTPUT
        echo "last_commit_badge=$LAST_COMMIT_BADGE" >> $GITHUB_OUTPUT
        echo "status_badge=$STATUS_BADGE" >> $GITHUB_OUTPUT
        echo "docker_badge=$DOCKER_BADGE" >> $GITHUB_OUTPUT
        echo "release_badge=$RELEASE_BADGE" >> $GITHUB_OUTPUT
        echo "downloads_badge=$DOWNLOADS_BADGE" >> $GITHUB_OUTPUT
        echo "issues_badge=$ISSUES_BADGE" >> $GITHUB_OUTPUT

    - name: Update README badges
      run: |
        # Create badge section for README
        cat > badges.md << 'EOF'
[![Version](${steps.badges.outputs.version_badge})](${steps.badges.outputs.release_badge})
[![License](${steps.badges.outputs.license_badge})](https://opensource.org/licenses/MIT)
[![Shell Requirement](${steps.badges.outputs.shell_badge})](https://www.gnu.org/software/bash/)
[![Docker Compatible](${steps.badges.outputs.docker_badge})](https://www.docker.com/)
[![Script Size](${steps.badges.outputs.size_badge})]()
[![Lines of Code](${steps.badges.outputs.lines_badge})]()
[![Status](${steps.badges.outputs.status_badge})]()
[![Last Commit](${steps.badges.outputs.last_commit_badge})](https://github.com/${github.repository}/commits/main)
[![GitHub Release](${steps.badges.outputs.release_badge})](https://github.com/${github.repository}/releases/latest)
[![Downloads](${steps.badges.outputs.downloads_badge})](https://github.com/${github.repository}/releases)
[![Issues](${steps.badges.outputs.issues_badge})](https://github.com/${github.repository}/issues)
EOF
        
        # Update README with new badges
        if grep -q "^\[\!\[Version\]" readme.md; then
          # Replace existing badges section
          sed -i '/^\[\!\[Version\]/,/^\[\!\[Issues\]/ {
            /^\[\!\[Version\]/r badges.md
            d
          }' readme.md
        else
          # Insert badges after the first line (title) and before the banner
          sed -i '/^# n8n-manager/r badges.md' readme.md
        fi
        
        # Clean up
        rm badges.md

    - name: Update version in README
      run: |
        VERSION="${{ steps.stats.outputs.version }}"
        
        # Update version reference in README
        sed -i "s/\*\*Current Version: [^*]*\*\*/\*\*Current Version: $VERSION\*\*/" readme.md

    - name: Generate repository statistics
      run: |
        # Create a JSON file with repository statistics for external use
        cat > repository-stats.json << EOF
{
  "version": "${{ steps.stats.outputs.version }}",
  "size": "${{ steps.stats.outputs.script_size }}",
  "lines": ${{ steps.stats.outputs.line_count }},
  "last_commit": "${{ steps.stats.outputs.last_commit }}",
  "shell_requirement": "${{ steps.stats.outputs.shell_requirement }}",
  "latest_release": "${{ steps.release.outputs.latest_release }}",
  "commits_since_release": ${{ steps.release.outputs.commits_since_release }},
  "repository": "${{ github.repository }}",
  "download_url": "https://raw.githubusercontent.com/${{ github.repository }}/main/n8n-manager.sh",
  "install_command": "curl -sSL https://i.n8n.community | sudo bash",
  "badges": {
    "version": "${{ steps.badges.outputs.version_badge }}",
    "size": "${{ steps.badges.outputs.size_badge }}",
    "lines": "${{ steps.badges.outputs.lines_badge }}",
    "shell": "${{ steps.badges.outputs.shell_badge }}",
    "license": "${{ steps.badges.outputs.license_badge }}",
    "status": "${{ steps.badges.outputs.status_badge }}",
    "docker": "${{ steps.badges.outputs.docker_badge }}",
    "release": "${{ steps.badges.outputs.release_badge }}",
    "downloads": "${{ steps.badges.outputs.downloads_badge }}",
    "issues": "${{ steps.badges.outputs.issues_badge }}"
  }
}
EOF

    - name: Commit badge updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No badge updates needed"
        else
          git add readme.md repository-stats.json
          git commit -m "chore: update dynamic badges and repository stats

- Updated version badges
- Updated repository statistics
- Generated stats JSON for external consumption

[skip ci]"
          git push
        fi
