name: Auto Version and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  SCRIPT_FILE: 'n8n-manager.sh'
  README_FILE: 'readme.md'
  CHANGELOG_FILE: 'CHANGELOG.md'

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      version_bump: ${{ steps.analyze.outputs.version_bump }}
      has_breaking: ${{ steps.analyze.outputs.has_breaking }}
      has_features: ${{ steps.analyze.outputs.has_features }}
      has_fixes: ${{ steps.analyze.outputs.has_fixes }}
      should_release: ${{ steps.analyze.outputs.should_release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Analyze commit messages
      id: analyze
      run: |
        # Get commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%s" --no-merges)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
        fi
        
        echo "Analyzing commits:"
        echo "$COMMITS"
        
        # Analyze commit patterns
        HAS_BREAKING=$(echo "$COMMITS" | grep -E "(BREAKING|breaking change|major:)" || true)
        HAS_FEATURES=$(echo "$COMMITS" | grep -E "(feat:|feature:|add:|new:)" || true)
        HAS_FIXES=$(echo "$COMMITS" | grep -E "(fix:|bug:|patch:|hotfix:)" || true)
        
        # Determine version bump
        if [ -n "$HAS_BREAKING" ]; then
          VERSION_BUMP="major"
        elif [ -n "$HAS_FEATURES" ]; then
          VERSION_BUMP="minor"
        elif [ -n "$HAS_FIXES" ]; then
          VERSION_BUMP="patch"
        else
          VERSION_BUMP="none"
        fi
        
        # Override with manual input if provided
        if [ "${{ github.event.inputs.version_type }}" != "" ]; then
          VERSION_BUMP="${{ github.event.inputs.version_type }}"
        fi
        
        SHOULD_RELEASE="false"
        if [ "$VERSION_BUMP" != "none" ] && [ -n "$COMMITS" ]; then
          SHOULD_RELEASE="true"
        fi
        
        echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
        echo "has_breaking=$([ -n "$HAS_BREAKING" ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "has_features=$([ -n "$HAS_FEATURES" ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "has_fixes=$([ -n "$HAS_FIXES" ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

  version-and-release:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.changelog.outputs.release_notes }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Get current version
      id: current_version
      run: |
        # Extract version from script
        CURRENT_VERSION=$(grep -E '^SCRIPT_VERSION=' $SCRIPT_FILE | cut -d'"' -f2 || echo "3.0.8")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: version
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        BUMP_TYPE="${{ needs.analyze-changes.outputs.version_bump }}"
        
        # Parse semantic version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update script version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Update version in script
        sed -i "s/^SCRIPT_VERSION=.*/SCRIPT_VERSION=\"$NEW_VERSION\"/" $SCRIPT_FILE
        
        echo "Updated script version to $NEW_VERSION"

    - name: Generate changelog entry
      id: changelog
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        DATE=$(date '+%Y-%m-%d')
        
        # Get commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create changelog entry
        CHANGELOG_ENTRY="## [$NEW_VERSION] - $DATE

### Changes
$COMMITS

"
        
        # Update CHANGELOG.md
        if [ -f "$CHANGELOG_FILE" ]; then
          # Insert new entry after the first line (assuming it's a header)
          sed -i "1a\\
$CHANGELOG_ENTRY" $CHANGELOG_FILE
        else
          # Create new changelog
          echo "# Changelog

All notable changes to this project will be documented in this file.

$CHANGELOG_ENTRY" > $CHANGELOG_FILE
        fi
        
        # Output release notes
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update README version badge
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Update version badge in README
        sed -i "s/\*\*Current Version: [^*]*\*\*/\*\*Current Version: $NEW_VERSION\*\*/" $README_FILE
        
        # Update shield badge if it exists
        sed -i "s/version-[^-]*-/version-$NEW_VERSION-/" $README_FILE

    - name: Generate changelog JSON
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        DATE=$(date '+%Y-%m-%d')
        
        # Create JSON changelog for frontend consumption
        cat > changelog.json << EOF
{
  "version": "$NEW_VERSION",
  "date": "$DATE",
  "changes": {
    "breaking": ${{ needs.analyze-changes.outputs.has_breaking }},
    "features": ${{ needs.analyze-changes.outputs.has_features }},
    "fixes": ${{ needs.analyze-changes.outputs.has_fixes }}
  },
  "download_url": "https://raw.githubusercontent.com/${{ github.repository }}/v$NEW_VERSION/n8n-manager.sh",
  "install_command": "curl -sSL https://i.n8n.community | sudo bash"
}
EOF

    - name: Commit changes
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add $SCRIPT_FILE $README_FILE $CHANGELOG_FILE changelog.json
        git commit -m "chore: bump version to $NEW_VERSION

- Updated script version
- Updated README badges
- Generated changelog entry
- Created changelog JSON for frontend

[skip ci]"
        
        git push

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release v${{ steps.version.outputs.new_version }}
        body: ${{ steps.changelog.outputs.release_notes }}
        draft: false
        prerelease: false

    - name: Upload script as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./n8n-manager.sh
        asset_name: n8n-manager.sh
        asset_content_type: application/x-sh

    - name: Upload changelog JSON as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./changelog.json
        asset_name: changelog.json
        asset_content_type: application/json
